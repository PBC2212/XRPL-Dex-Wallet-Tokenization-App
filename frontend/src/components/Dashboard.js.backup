import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import apiService from '../services/apiService';

const Dashboard = ({ currentWallet, networkInfo }) => {
  const [balance, setBalance] = useState(null);
  const [trustlines, setTrustlines] = useState([]);
  const [recentTransactions, setRecentTransactions] = useState([]);
  const [createdTokens, setCreatedTokens] = useState([]); // NEW: Track created tokens
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    totalBalance: 0,
    activeTokens: 0,
    createdTokens: 0, // NEW: Count of created tokens
    totalTransactions: 0,
    portfolioValue: 0
  });

  // Load dashboard data
  useEffect(() => {
    if (currentWallet) {
      loadDashboardData();
    } else {
      setLoading(false);
    }
  }, [currentWallet]);

  const loadDashboardData = async () => {
    if (!currentWallet) return;

    try {
      setLoading(true);
      
      // Load balance
      const balanceResponse = await apiService.getBalance(currentWallet.address);
      setBalance(balanceResponse.data);

      // Load trustlines
      const trustlinesResponse = await apiService.getTrustlines(currentWallet.address);
      setTrustlines(trustlinesResponse.data.trustlines || []);

      // Load recent transactions
      const transactionsResponse = await apiService.getTransactions(currentWallet.address, 5);
      setRecentTransactions(transactionsResponse.data.transactions || []);

      // NEW: Load created tokens
      let tokens = [];
      let createdCount = 0;
      try {
        const tokensResponse = await apiService.getTokens();
        if (tokensResponse && tokensResponse.success) {
          tokens = tokensResponse.data.tokens || [];
          // Filter tokens created by current user
          const userTokens = tokens.filter(token => 
            token.createdBy === currentWallet.address || 
            token.issuer === currentWallet.address
          );
          setCreatedTokens(userTokens);
          createdCount = userTokens.length;
        }
      } catch (error) {
        console.log('No tokens endpoint available yet');
      }

      // Calculate stats
      const xrpBalance = parseFloat(balanceResponse.data.xrpBalance || 0);
      const activeTokensCount = trustlinesResponse.data.trustlines?.filter(tl => parseFloat(tl.balance) > 0).length || 0;
      const totalTxCount = transactionsResponse.data.transactions?.length || 0;

      setStats({
        totalBalance: xrpBalance,
        activeTokens: activeTokensCount,
        createdTokens: createdCount, // NEW: Include created tokens count
        totalTransactions: totalTxCount,
        portfolioValue: xrpBalance * 0.5 // Mock portfolio value
      });

    } catch (error) {
      console.error('Failed to load dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const refreshData = () => {
    loadDashboardData();
  };

  // NEW: Format currency code for display
  const formatCurrencyCode = (code) => {
    if (code && code.length === 40) {
      // Handle hex currency codes
      return code.substring(0, 8) + '...';
    }
    return code || 'N/A';
  };

  if (!currentWallet) {
    return (
      <div className="dashboard">
        <div className="welcome-section">
          <div className="welcome-card">
            <div className="welcome-icon">🏗️</div>
            <h2>Welcome to XRPL Tokenization Platform</h2>
            <p>
              Create, manage, and trade tokenized assets on the XRP Ledger. 
              Get started by creating or importing a wallet.
            </p>
            <Link to="/wallet" className="btn btn-primary">
              Get Started
            </Link>
          </div>
        </div>

        <div className="features-grid">
          <div className="feature-card">
            <div className="feature-icon">👛</div>
            <h3>Secure Wallet Management</h3>
            <p>Create and manage XRPL wallets with industry-standard encryption</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">🏠</div>
            <h3>Real Estate Tokenization</h3>
            <p>Tokenize real estate properties for fractional ownership</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">💎</div>
            <h3>Investment Opportunities</h3>
            <p>Browse and invest in tokenized assets with complete transparency</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">📊</div>
            <h3>Portfolio Tracking</h3>
            <p>Monitor your investments and track performance in real-time</p>
          </div>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="dashboard">
        <div className="loading-section">
          <div className="loading-spinner"></div>
          <p>Loading dashboard data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard">
      {/* Header */}
      <div className="dashboard-header">
        <div className="header-content">
          <h1>Dashboard</h1>
          <p>Welcome back! Here's your portfolio overview.</p>
        </div>
        <button onClick={refreshData} className="btn btn-secondary">
          🔄 Refresh
        </button>
      </div>

      {/* Stats Grid */}
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">💰</div>
          <div className="stat-content">
            <h3>XRP Balance</h3>
            <p className="stat-value">{apiService.formatXRP(stats.totalBalance)}</p>
            <span className="stat-change positive">+0.00%</span>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">🪙</div>
          <div className="stat-content">
            <h3>Active Tokens</h3>
            <p className="stat-value">{stats.activeTokens}</p>
            <span className="stat-change neutral">Holdings</span>
          </div>
        </div>

        {/* NEW: Created Tokens Stat */}
        <div className="stat-card">
          <div className="stat-icon">🏗️</div>
          <div className="stat-content">
            <h3>Created Tokens</h3>
            <p className="stat-value">{stats.createdTokens}</p>
            <span className="stat-change positive">Issued</span>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">📋</div>
          <div className="stat-content">
            <h3>Transactions</h3>
            <p className="stat-value">{stats.totalTransactions}</p>
            <span className="stat-change neutral">Recent</span>
          </div>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="content-grid">
        {/* Quick Actions */}
        <div className="panel">
          <div className="panel-header">
            <h3>Quick Actions</h3>
          </div>
          <div className="quick-actions">
            <Link to="/tokens" className="action-button">
              <div className="action-icon">🏗️</div>
              <div className="action-content">
                <h4>Create Token</h4>
                <p>Tokenize a new asset</p>
              </div>
            </Link>
            <Link to="/invest" className="action-button">
              <div className="action-icon">💎</div>
              <div className="action-content">
                <h4>Browse Assets</h4>
                <p>Find investment opportunities</p>
              </div>
            </Link>
            <Link to="/wallet" className="action-button">
              <div className="action-icon">👛</div>
              <div className="action-content">
                <h4>Manage Wallet</h4>
                <p>Wallet operations</p>
              </div>
            </Link>
          </div>
        </div>

        {/* NEW: Your Created Tokens */}
        <div className="panel">
          <div className="panel-header">
            <h3>Your Tokens</h3>
            <Link to="/tokens" className="panel-link">Create New</Link>
          </div>
          <div className="token-list">
            {createdTokens.length > 0 ? (
              createdTokens.slice(0, 5).map((token, index) => (
                <div key={index} className="token-item">
                  <div className="token-icon">🪙</div>
                  <div className="token-info">
                    <h4>{token.name}</h4>
                    <p>{token.currencyCode} • {token.totalSupply?.toLocaleString()} total</p>
                  </div>
                  <div className="token-amount">
                    <p className="amount">{token.status || 'CREATED'}</p>
                    <p className="limit">Issuer: {apiService.truncateAddress(token.issuer)}</p>
                  </div>
                </div>
              ))
            ) : (
              <div className="empty-state">
                <p>No tokens created yet</p>
                <Link to="/tokens" className="btn btn-primary btn-sm">Create Token</Link>
              </div>
            )}
          </div>
        </div>

        {/* Token Holdings */}
        <div className="panel">
          <div className="panel-header">
            <h3>Token Holdings</h3>
            <Link to="/invest" className="panel-link">View All</Link>
          </div>
          <div className="token-list">
            {trustlines.length > 0 ? (
              trustlines.slice(0, 5).map((trustline, index) => (
                <div key={index} className="token-item">
                  <div className="token-icon">{formatCurrencyCode(trustline.currency)}</div>
                  <div className="token-info">
                    <h4>{formatCurrencyCode(trustline.currency)}</h4>
                    <p>{apiService.truncateAddress(trustline.account)}</p>
                  </div>
                  <div className="token-amount">
                    <p className="amount">{apiService.formatTokenAmount(trustline.balance, trustline.currency)}</p>
                    <p className="limit">Limit: {apiService.formatTokenAmount(trustline.limit, trustline.currency)}</p>
                  </div>
                </div>
              ))
            ) : (
              <div className="empty-state">
                <p>No token holdings yet</p>
                <Link to="/invest" className="panel-link">Browse Assets</Link>
              </div>
            )}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="panel">
          <div className="panel-header">
            <h3>Recent Activity</h3>
            <Link to="/transactions" className="panel-link">View All</Link>
          </div>
          <div className="activity-list">
            {recentTransactions.length > 0 ? (
              recentTransactions.map((tx, index) => (
                <div key={index} className="activity-item">
                  <div className="activity-icon">
                    {tx.transaction?.TransactionType === 'Payment' ? '💸' : '🔄'}
                  </div>
                  <div className="activity-info">
                    <h4>{tx.transaction?.TransactionType || 'Transaction'}</h4>
                    <p>{apiService.formatTimestamp(tx.transaction?.date)}</p>
                  </div>
                  <div className="activity-amount">
                    <p>{tx.transaction?.Amount ? apiService.formatXRP(tx.transaction.Amount / 1000000) : 'N/A'}</p>
                  </div>
                </div>
              ))
            ) : (
              <div className="empty-state">
                <p>No recent transactions</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Network Status */}
      {networkInfo && (
        <div className="network-status-panel">
          <h3>Network Status</h3>
          <div className="network-details">
            <div className="detail">
              <span className="label">Network:</span>
              <span className="value">{networkInfo.network || 'TESTNET'}</span>
            </div>
            <div className="detail">
              <span className="label">Ledger:</span>
              <span className="value">
                {networkInfo.serverInfo?.validated_ledger?.seq?.toLocaleString() || 'Available'}
              </span>
            </div>
            <div className="detail">
              <span className="label">Base Reserve:</span>
              <span className="value">
                {networkInfo.serverInfo?.validated_ledger?.reserve_base_xrp || '10'} XRP
              </span>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        .dashboard {
          max-width: 1400px;
          margin: 0 auto;
        }

        .welcome-section {
          text-align: center;
          margin-bottom: 3rem;
        }

        .welcome-card {
          background: white;
          border-radius: 16px;
          padding: 3rem;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
          max-width: 600px;
          margin: 0 auto;
        }

        .welcome-icon {
          font-size: 4rem;
          margin-bottom: 1rem;
        }

        .welcome-card h2 {
          font-size: 2rem;
          font-weight: 700;
          color: #1f2937;
          margin-bottom: 1rem;
        }

        .welcome-card p {
          color: #6b7280;
          font-size: 1.1rem;
          margin-bottom: 2rem;
          line-height: 1.6;
        }

        .features-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 2rem;
          margin-top: 3rem;
        }

        .feature-card {
          background: white;
          border-radius: 12px;
          padding: 2rem;
          text-align: center;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
          transition: transform 0.2s, box-shadow 0.2s;
        }

        .feature-card:hover {
          transform: translateY(-4px);
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .feature-icon {
          font-size: 3rem;
          margin-bottom: 1rem;
        }

        .feature-card h3 {
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 0.75rem;
        }

        .feature-card p {
          color: #6b7280;
          line-height: 1.5;
        }

        .dashboard-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 2rem;
        }

        .header-content h1 {
          font-size: 2rem;
          font-weight: 700;
          color: #1f2937;
          margin-bottom: 0.5rem;
        }

        .header-content p {
          color: #6b7280;
          margin: 0;
        }

        .loading-section {
          text-align: center;
          padding: 4rem 0;
        }

        .stats-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
          gap: 1.5rem;
          margin-bottom: 2rem;
        }

        .stat-card {
          background: white;
          border-radius: 12px;
          padding: 1.5rem;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
          display: flex;
          align-items: center;
          gap: 1rem;
        }

        .stat-icon {
          font-size: 2.5rem;
          opacity: 0.8;
        }

        .stat-content h3 {
          font-size: 0.875rem;
          color: #6b7280;
          text-transform: uppercase;
          letter-spacing: 0.05em;
          margin-bottom: 0.5rem;
        }

        .stat-value {
          font-size: 1.75rem;
          font-weight: 700;
          color: #1f2937;
          margin-bottom: 0.25rem;
        }

        .stat-change {
          font-size: 0.875rem;
          font-weight: 500;
        }

        .stat-change.positive { color: #10b981; }
        .stat-change.negative { color: #ef4444; }
        .stat-change.neutral { color: #6b7280; }

        .content-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
          gap: 2rem;
          margin-bottom: 2rem;
        }

        .panel {
          background: white;
          border-radius: 12px;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
          overflow: hidden;
        }

        .panel-header {
          padding: 1.5rem 1.5rem 1rem;
          display: flex;
          justify-content: space-between;
          align-items: center;
          border-bottom: 1px solid #f3f4f6;
        }

        .panel-header h3 {
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
          margin: 0;
        }

        .panel-link {
          color: #3b82f6;
          text-decoration: none;
          font-size: 0.875rem;
          font-weight: 500;
        }

        .panel-link:hover {
          color: #1d4ed8;
        }

        .quick-actions {
          padding: 1rem;
          display: flex;
          flex-direction: column;
          gap: 0.75rem;
        }

        .action-button {
          display: flex;
          align-items: center;
          gap: 1rem;
          padding: 1rem;
          background: #f8fafc;
          border-radius: 8px;
          text-decoration: none;
          color: inherit;
          transition: background-color 0.2s;
        }

        .action-button:hover {
          background: #e2e8f0;
        }

        .action-icon {
          font-size: 1.5rem;
        }

        .action-content h4 {
          font-size: 0.95rem;
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 0.25rem;
        }

        .action-content p {
          font-size: 0.875rem;
          color: #6b7280;
          margin: 0;
        }

        .token-list,
        .activity-list {
          padding: 1rem;
        }

        .token-item,
        .activity-item {
          display: flex;
          align-items: center;
          gap: 1rem;
          padding: 0.75rem 0;
          border-bottom: 1px solid #f3f4f6;
        }

        .token-item:last-child,
        .activity-item:last-child {
          border-bottom: none;
        }

        .token-icon,
        .activity-icon {
          font-size: 1.5rem;
          width: 40px;
          text-align: center;
        }

        .token-info,
        .activity-info {
          flex: 1;
        }

        .token-info h4,
        .activity-info h4 {
          font-size: 0.95rem;
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 0.25rem;
        }

        .token-info p,
        .activity-info p {
          font-size: 0.875rem;
          color: #6b7280;
          margin: 0;
        }

        .token-amount {
          text-align: right;
        }

        .token-amount .amount,
        .activity-amount p {
          font-size: 0.95rem;
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 0.25rem;
        }

        .token-amount .limit {
          font-size: 0.75rem;
          color: #6b7280;
          margin: 0;
        }

        .empty-state {
          text-align: center;
          padding: 2rem 0;
          color: #6b7280;
        }

        .network-status-panel {
          background: white;
          border-radius: 12px;
          padding: 1.5rem;
          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .network-status-panel h3 {
          font-size: 1.25rem;
          font-weight: 600;
          color: #1f2937;
          margin-bottom: 1rem;
        }

        .network-details {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 1rem;
        }

        .detail {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 0.75rem;
          background: #f8fafc;
          border-radius: 6px;
        }

        .detail .label {
          font-weight: 500;
          color: #6b7280;
        }

        .detail .value {
          font-weight: 600;
          color: #1f2937;
        }

        .btn-sm {
          padding: 0.5rem 1rem;
          font-size: 0.875rem;
        }

        @media (max-width: 768px) {
          .dashboard-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
          }
          
          .stats-grid {
            grid-template-columns: repeat(2, 1fr);
          }
          
          .content-grid {
            grid-template-columns: 1fr;
          }
        }

        @media (max-width: 480px) {
          .stats-grid {
            grid-template-columns: 1fr;
          }
          
          .welcome-card {
            padding: 2rem;
          }
        }
      `}</style>
    </div>
  );
};

export default Dashboard;