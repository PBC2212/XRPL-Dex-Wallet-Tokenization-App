# RWA Tokenization Platform API Documentation

## Base URL
- **Development**: `http://localhost:3001`
- **Production**: `https://your-app-name.onrender.com`

## Response Format
All API responses follow this consistent format:
```json
{
  "success": true,
  "message": "Operation successful",
  "data": { /* response data */ },
  "timestamp": "2025-01-08T12:00:00.000Z"
}
```

---

## üè• Health Check Endpoints

### Basic Health Check
```http
GET /health
```
**Response:**
```json
{
  "success": true,
  "message": "Service is healthy",
  "data": {
    "status": "healthy",
    "uptime": 3600,
    "version": "1.0.0"
  }
}
```

### Detailed Health Check
```http
GET /health/detailed
```
Returns comprehensive system status including XRPL connection, memory usage, CPU load.

### XRPL Network Status
```http
GET /health/xrpl
```
Returns XRPL network connection status and server info.

---

## üíº Wallet Management Endpoints

### Generate New Wallet
```http
POST /api/wallet/generate
Content-Type: application/json

{
  "userId": "user123" // optional
}
```

**Response:**
```json
{
  "success": true,
  "message": "Wallet generated successfully",
  "data": {
    "id": "wallet-uuid",
    "address": "rN7n7otQDd6FczFgLdSqtcsAUxDkw6fzRH",
    "publicKey": "ED01234...",
    "seed": "sn3nxiW7v8KXzPzAqzyHXbSSKuN4N",
    "createdAt": "2025-01-08T12:00:00.000Z",
    "isActivated": false
  }
}
```

### Import Wallet from Seed
```http
POST /api/wallet/import
Content-Type: application/json

{
  "seed": "sn3nxiW7v8KXzPzAqzyHXbSSKuN4N",
  "userId": "user123" // optional
}
```

### Get Wallet Details
```http
GET /api/wallet/{walletId}
```

### Activate Wallet
```http
POST /api/wallet/{walletId}/activate
```

### Get Wallet Transaction History
```http
GET /api/wallet/{walletId}/transactions?limit=20
```

### Get Wallet Backup (Seed & Keys)
```http
GET /api/wallet/{walletId}/backup?confirm=true
```

---

## üè¢ Asset Tokenization Endpoints

### Create Real-World Asset
```http
POST /api/asset/create
Content-Type: application/json

{
  "name": "Downtown Office Building",
  "description": "Premium commercial real estate",
  "assetType": "real_estate",
  "value": 5000000,
  "location": "123 Main St, New York, NY",
  "ownerWalletId": "wallet-uuid",
  "documents": [
    {
      "type": "deed",
      "url": "https://example.com/deed.pdf"
    }
  ],
  "metadata": {
    "sqft": 10000,
    "floors": 5,
    "yearBuilt": 2020
  }
}
```

**Valid Asset Types:**
- `real_estate`
- `vehicle`
- `artwork`
- `commodity`
- `equipment`
- `other`

### Tokenize Asset on XRPL
```http
POST /api/asset/{assetId}/tokenize
Content-Type: application/json

{
  "currencyCode": "RWA", // optional, 3 chars
  "totalSupply": 50000 // optional, defaults to value/100
}
```

**Response:**
```json
{
  "success": true,
  "message": "Asset tokenized successfully",
  "data": {
    "assetId": "asset-uuid",
    "name": "Downtown Office Building",
    "tokenizationData": {
      "currencyCode": "RWA",
      "totalSupply": 50000,
      "availableSupply": 50000,
      "issuerAddress": "rN7n7otQDd6FczFgLdSqtcsAUxDkw6fzRH",
      "transactionHash": "0x123...",
      "tokenizedAt": "2025-01-08T12:00:00.000Z"
    },
    "status": "tokenized"
  }
}
```

### Transfer Tokens
```http
POST /api/asset/transfer
Content-Type: application/json

{
  "fromWalletId": "wallet-uuid",
  "toAddress": "rReceiver123...",
  "currencyCode": "RWA",
  "issuerAddress": "rIssuer123...",
  "amount": 100
}
```

### Get Token Balance
```http
GET /api/asset/balance/{walletId}/{currencyCode}/{issuerAddress}
```

### Redeem Asset Tokens
```http
POST /api/asset/{assetId}/redeem
Content-Type: application/json

{
  "walletId": "wallet-uuid",
  "tokenAmount": 1000
}
```

### Get Wallet Assets
```http
GET /api/asset/wallet/{walletId}
```

---

## üìà DEX Trading Endpoints

### Create Limit Order
```http
POST /api/dex/offer
Content-Type: application/json

{
  "walletId": "wallet-uuid",
  "takerGets": {
    "currency": "RWA",
    "issuer": "rIssuer123...",
    "value": "100"
  },
  "takerPays": "1000000", // XRP in drops (1 XRP = 1,000,000 drops)
  "expiration": "2025-12-31T23:59:59.000Z" // optional
}
```

### Execute Market Order
```http
POST /api/dex/market-order
Content-Type: application/json

{
  "walletId": "wallet-uuid",
  "takerGets": {
    "currency": "RWA",
    "issuer": "rIssuer123...",
    "value": "50"
  },
  "takerPays": "500000"
}
```

### Get Order Book
```http
GET /api/dex/orderbook?takerGetsCurrency=RWA&takerGetsIssuer=rIssuer123...&takerPaysCurrency=XRP&limit=20
```

### Cancel Order
```http
DELETE /api/dex/offer/{walletId}/{offerSequence}
```

### Get Wallet Orders
```http
GET /api/dex/offers/{walletId}
```

### Get Trading Pair Info
```http
GET /api/dex/pair/RWA/rIssuer123.../XRP/XRP
```

### Get Trade History
```http
GET /api/dex/trades/{walletId}?limit=20
```

---

## üß™ Testing Workflow

### 1. Generate and Activate Wallet
```bash
# Generate wallet
curl -X POST http://localhost:3001/api/wallet/generate \
  -H "Content-Type: application/json" \
  -d '{"userId": "testuser"}'

# Fund wallet with testnet XRP (use XRPL testnet faucet)
# Visit: https://xrpl.org/xrp-testnet-faucet.html

# Activate wallet
curl -X POST http://localhost:3001/api/wallet/{walletId}/activate
```

### 2. Create and Tokenize Asset
```bash
# Create asset
curl -X POST http://localhost:3001/api/asset/create \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test Property",
    "assetType": "real_estate",
    "value": 100000,
    "ownerWalletId": "wallet-uuid"
  }'

# Tokenize asset
curl -X POST http://localhost:3001/api/asset/{assetId}/tokenize \
  -H "Content-Type: application/json" \
  -d '{"currencyCode": "TST", "totalSupply": 1000}'
```

### 3. Trade on DEX
```bash
# Create limit order
curl -X POST http://localhost:3001/api/dex/offer \
  -H "Content-Type: application/json" \
  -d '{
    "walletId": "wallet-uuid",
    "takerGets": {"currency": "TST", "issuer": "rIssuer...", "value": "10"},
    "takerPays": "10000000"
  }'

# Check order book
curl "http://localhost:3001/api/dex/orderbook?takerGetsCurrency=TST&takerGetsIssuer=rIssuer...&takerPaysCurrency=XRP"
```

---

## üîß Error Handling

### Common Error Codes
- `WALLET_NOT_FOUND` (404)
- `WALLET_NOT_ACTIVATED` (400)
- `INSUFFICIENT_FUNDS` (400)
- `INVALID_SEED` (400)
- `ASSET_NOT_FOUND` (404)
- `TOKENIZATION_FAILED` (500)
- `OFFER_CREATION_FAILED` (500)

### Error Response Format
```json
{
  "success": false,
  "message": "Wallet not found",
  "data": null,
  "code": "WALLET_NOT_FOUND",
  "timestamp": "2025-01-08T12:00:00.000Z"
}
```

---

## üîí Security Notes

- **Private Keys**: Never stored in plain text (use encryption in production)
- **Rate Limiting**: 100 requests per 15 minutes per IP
- **Input Validation**: All inputs are sanitized and validated
- **CORS**: Configurable origins for production deployment
- **HTTPS**: Always use HTTPS in production

---

## üìä Statistics Endpoints

- `GET /api/wallet/stats` - Wallet statistics
- `GET /api/asset/stats` - Asset tokenization statistics  
- `GET /api/dex/stats` - DEX trading statistics

---

## üåê Production Deployment

Ready for deployment on Render with:
- Environment variable configuration
- Health check endpoints for load balancers
- Graceful shutdown handling
- Production logging
- Error monitoring
- CORS security